/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlacesRouteImport } from './routes/places/route'
import { Route as IndexImport } from './routes/index'
import { Route as PlacesFsqidImport } from './routes/places/$fsq_id'

// Create/Update Routes

const PlacesRouteRoute = PlacesRouteImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlacesFsqidRoute = PlacesFsqidImport.update({
  id: '/$fsq_id',
  path: '/$fsq_id',
  getParentRoute: () => PlacesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/places': {
      id: '/places'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof PlacesRouteImport
      parentRoute: typeof rootRoute
    }
    '/places/$fsq_id': {
      id: '/places/$fsq_id'
      path: '/$fsq_id'
      fullPath: '/places/$fsq_id'
      preLoaderRoute: typeof PlacesFsqidImport
      parentRoute: typeof PlacesRouteImport
    }
  }
}

// Create and export the route tree

interface PlacesRouteRouteChildren {
  PlacesFsqidRoute: typeof PlacesFsqidRoute
}

const PlacesRouteRouteChildren: PlacesRouteRouteChildren = {
  PlacesFsqidRoute: PlacesFsqidRoute,
}

const PlacesRouteRouteWithChildren = PlacesRouteRoute._addFileChildren(
  PlacesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteRouteWithChildren
  '/places/$fsq_id': typeof PlacesFsqidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteRouteWithChildren
  '/places/$fsq_id': typeof PlacesFsqidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteRouteWithChildren
  '/places/$fsq_id': typeof PlacesFsqidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/places' | '/places/$fsq_id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/places' | '/places/$fsq_id'
  id: '__root__' | '/' | '/places' | '/places/$fsq_id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlacesRouteRoute: typeof PlacesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlacesRouteRoute: PlacesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/places"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/places": {
      "filePath": "places/route.tsx",
      "children": [
        "/places/$fsq_id"
      ]
    },
    "/places/$fsq_id": {
      "filePath": "places/$fsq_id.tsx",
      "parent": "/places"
    }
  }
}
ROUTE_MANIFEST_END */
